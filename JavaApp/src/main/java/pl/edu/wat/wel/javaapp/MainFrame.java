/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.edu.wat.wel.protocoltest;

import com.fazecast.jSerialComm.*;

/**
 *
 * @author pdaba
 */
public class MainFrame extends javax.swing.JFrame {

    SerialPort sp = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCmdType = new javax.swing.ButtonGroup();
        lSerialPortSelect = new javax.swing.JLabel();
        cbSerialPortSelect = new javax.swing.JComboBox<>();
        lSerialPortBaudrate = new javax.swing.JLabel();
        tfSerialPortBaudrate = new javax.swing.JTextField();
        bSerialPortConnect = new javax.swing.JButton();
        lCmdSelect = new javax.swing.JLabel();
        cbCmdSelect = new javax.swing.JComboBox<>();
        lCmdValue = new javax.swing.JLabel();
        tfCmdValues = new javax.swing.JTextField();
        lCmdText = new javax.swing.JLabel();
        tfCmdText = new javax.swing.JTextField();
        lCmdType = new javax.swing.JLabel();
        rbCmdTypeSet = new javax.swing.JRadioButton();
        rbCmdTypeGet = new javax.swing.JRadioButton();
        bCmdSend = new javax.swing.JButton();
        lCmdResponse = new javax.swing.JLabel();
        tfCmdResponse = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JavaApp - Paweł Dąbal");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lSerialPortSelect.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lSerialPortSelect.setText("Serial port select:");

        cbSerialPortSelect.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cbSerialPortSelectFocusGained(evt);
            }
        });

        lSerialPortBaudrate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lSerialPortBaudrate.setText("Baudrate:");

        tfSerialPortBaudrate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSerialPortBaudrate.setText("115200");

        bSerialPortConnect.setText("Connect");
        bSerialPortConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSerialPortConnectActionPerformed(evt);
            }
        });

        lCmdSelect.setText("CMD:");

        cbCmdSelect.setToolTipText("");

        lCmdValue.setText("Values:");

        tfCmdValues.setText("0x00;0x00;0x00");

        lCmdText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lCmdText.setText("Text:");
        lCmdText.setToolTipText("Co to jest");

        tfCmdText.setText("Demo");

        lCmdType.setText("Command type:");

        bgCmdType.add(rbCmdTypeSet);
        rbCmdTypeSet.setSelected(true);
        rbCmdTypeSet.setText("Set");

        bgCmdType.add(rbCmdTypeGet);
        rbCmdTypeGet.setText("Get");

        bCmdSend.setText("Send command");
        bCmdSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCmdSendActionPerformed(evt);
            }
        });

        lCmdResponse.setText("Read values:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCmdResponse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCmdResponse))
                    .addComponent(bSerialPortConnect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCmdSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCmdSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCmdValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfCmdValues))
                    .addComponent(bCmdSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCmdText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCmdText))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lSerialPortBaudrate, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lSerialPortSelect))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfSerialPortBaudrate)
                            .addComponent(cbSerialPortSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lCmdType, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbCmdTypeSet, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rbCmdTypeGet, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSerialPortSelect)
                    .addComponent(cbSerialPortSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSerialPortBaudrate)
                    .addComponent(tfSerialPortBaudrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSerialPortConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCmdSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lCmdSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCmdValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lCmdValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCmdText)
                    .addComponent(tfCmdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCmdTypeSet)
                    .addComponent(rbCmdTypeGet)
                    .addComponent(lCmdType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCmdSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCmdResponse)
                    .addComponent(tfCmdResponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        var serialPorts = SerialPort.getCommPorts();
        for (SerialPort port : serialPorts) {
            cbSerialPortSelect.addItem(port.getSystemPortName());
        }
        for (CmdType cmd : CmdType.values()) {
            cbCmdSelect.addItem(cmd.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void bSerialPortConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSerialPortConnectActionPerformed
        if (sp == null) {
            sp = SerialPort.getCommPort((String) cbSerialPortSelect.getSelectedItem());
            sp.setBaudRate(Integer.parseInt(tfSerialPortBaudrate.getText()));
            sp.setNumDataBits(8);
            sp.setNumStopBits(1);
            sp.setParity(0);
            sp.openPort();
//            sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 0, 0);
            sp.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, 50, 0);

            bSerialPortConnect.setText("Disconnect");
        } else {
            sp.closePort();
            sp = null;
            bSerialPortConnect.setText("Connect");
        }
    }//GEN-LAST:event_bSerialPortConnectActionPerformed

    private void bCmdSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCmdSendActionPerformed
        if (sp != null && sp.isOpen()) {
            byte[] readEcho = new byte[64];
            int cmdIndex = cbCmdSelect.getSelectedIndex();
            String cmdValues = tfCmdValues.getText();
            String cmdText = tfCmdText.getText();
            boolean cmdTypeSet = rbCmdTypeSet.isSelected();
            String cmdResponse = "";
            boolean cmdStatus = false;

            String cmd = Protocol.getCmd(cmdIndex, cmdValues, cmdText, cmdTypeSet);
            sp.writeBytes(cmd.getBytes(), cmd.length());
            sp.readBytes(readEcho, cmd.length() + 4);
            // Read echo
            cmdResponse = new String(readEcho);
            cmdStatus = Protocol.checkResponse(cmdIndex, cmdResponse);

            if (cmdStatus) {
                if (cmdTypeSet) {
                    tfCmdResponse.setText(cmdResponse.substring(cmd.length()));
                } else {
                    byte[] readBuffer = new byte[32];
                    // Read respond
                    sp.readBytes(readBuffer, readBuffer.length);
                    String cmdResp = new String(readBuffer);
                    tfCmdResponse.setText(cmdResp);
                }
            }
        }
    }//GEN-LAST:event_bCmdSendActionPerformed

    private void cbSerialPortSelectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbSerialPortSelectFocusGained
        var serialPorts = SerialPort.getCommPorts();
        for (SerialPort port : serialPorts) {
            cbSerialPortSelect.addItem(port.getSystemPortName());
        }
        bgCmdType.add(rbCmdTypeGet);
    }//GEN-LAST:event_cbSerialPortSelectFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCmdSend;
    private javax.swing.JButton bSerialPortConnect;
    private javax.swing.ButtonGroup bgCmdType;
    private javax.swing.JComboBox<String> cbCmdSelect;
    private javax.swing.JComboBox<String> cbSerialPortSelect;
    private javax.swing.JLabel lCmdResponse;
    private javax.swing.JLabel lCmdSelect;
    private javax.swing.JLabel lCmdText;
    private javax.swing.JLabel lCmdType;
    private javax.swing.JLabel lCmdValue;
    private javax.swing.JLabel lSerialPortBaudrate;
    private javax.swing.JLabel lSerialPortSelect;
    private javax.swing.JRadioButton rbCmdTypeGet;
    private javax.swing.JRadioButton rbCmdTypeSet;
    private javax.swing.JTextField tfCmdResponse;
    private javax.swing.JTextField tfCmdText;
    private javax.swing.JTextField tfCmdValues;
    private javax.swing.JTextField tfSerialPortBaudrate;
    // End of variables declaration//GEN-END:variables
}
